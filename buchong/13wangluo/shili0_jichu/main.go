//目录：www.kancloud.cn/imdszxs/golang/1509671
//1.Go语言Socket编程详解
//2.Go语言Dial()函数：建立网络连接
//3.Go语言ICMP协议：向主机发送消息
//4.Go语言TCP协议
//5.Go语言DialTCP()：网络通信
//6.Go语言HTTP客户端实现简述
//7.Go语言服务端处理HTTP、HTTPS请求
//8.Go语言RPC协议：远程过程调用
//9.如何设计优雅的RPC接口
//10.Go语言解码未知结构的JSON数据
//11.Go语言如何搭建网站程序
//12.Go语言开发一个简单的相册网站
//13.Go语言数据库（Database）相关操作
//14.示例：并发时钟服务器
//15.Go语言router请求路由
//16.Go语言middleware：Web中间件
//17.Go语言常见大型Web项目分层（MVC架构）
//18.Go语言Cookie的设置与读取
//19.Go语言获取IP地址和域名解析
//20.Go语言TCP网络程序设计
//21.Go语言UDP网络程序设计
//22.Go语言IP网络程序设计
//23.Go语言是如何使得Web工作的
//24.Go语言session的创建和管理
//25.Go语言Ratelimit服务流量限制
//26.Go语言WEB框架(Gin)详解

// go网络编程基础
// www.cnblogs.com/aaronthon/p/10951929.html
package main

import (
	"fmt"
	"net"
	"os"
)

//数据链路层
//帧（frame） ：标头（Head）长度固定18个字节，和数据（Data）最短46字节，最长1500字节
//网卡是必须设备，数据包从一块网卡传送到另一块网卡。
//网卡的地址就是数据包发送地址和接收地址，叫MAC地址
//MAC独一无二，48个二进制位，通常用12个十六进制数表示，前6个厂商编号，后6个网卡流水号
//通过ARP协议来获取接受方的MAC地址

//网络层
//网址（网络地址）：区分不同的计算机是否属于同一个子网络
//网络地址是网络管理员分配的
//逻辑上，先处理网络地址，然后处理MAC地址。
//规定网络地址的一些，叫做IP地址
//目前广泛采用ip协议第四版，
//IPv4
//这个版本，ip地址由32个二进制位组成，习惯分成4段的十进制数表示：
//从0.0.0.0 到 255.255.255.255
//根据ip协议，发送的数据，叫做IP数据包，分为“标头”和“数据”两个部分：
//标头：包括版本，长度，ip地址等信息。长度20-60字节，
//数据：具体内容
//整个数据包最大为65535字节
//
//IPv6 参考：www.yht7.com/golang/5576.html
//是下一版互联网协议，采用128位地址长度，不受限制地提供地址。
//地址格式类似：2002:c0e8:82e7:0:0:0:c0e8:82e7
//go支持的ip
//go的net包中定义了很多类型，函数和方法用来网络编程，其中ip的定义如下：
//有很多函数来操作ip，其中ParseIP(s string)IP函数，会把一个ipv4，或ipv6的地址转化成IP类型：

func main() {
	if len(os.Args) != 2 {
		fmt.Fprintf(os.Stderr, "Usage: %s ip-addr", os.Args[0])
		os.Exit(1)
	}
	name := os.Args[1]
	addr := net.ParseIP(name)
	if addr == nil {
		fmt.Println("Invalid address")
	} else {
		fmt.Println("The address is ", addr.String())
	}
	os.Exit(0)
}

//执行之后，你就会发现只要你输入一个IP地址就会给出相应的IP格式.
//./main.exe 2002:c0e8:82e7:0:0:0:c0e8:82e7
//输出的结果：The address is  2002:c0e8:82e7::c0e8:82e7

//传输层
//端口（port）：每一个使用网卡的程序的编号，每个数据包都发到主机的特定端口
//所以不同的程序就能取到自己所需要的数据
//端口是0到65535之间的整数，正好16个二进制位
//0-1023的端口被系统占用，用户只能选用大于1023的端口
//有了ip和端口，我们就能实现唯一确定互联网上一个程序，进而实现网络间的程序通信
//必须在数据包中加入端口信息，这就需要新的协议
//最简单的实现叫做UDP协议，格式几乎就是在数据前面，加上端口号。可靠性差
//TCP协议，确保数据不会遗失，缺点是过程复杂，实现困难，消耗较多的资源
//tcp数据包没有长度限制，但是为了保证网络的效率，通常TCP数据包的长度不会超过IP数据包的长度
//以确保单个TCP数据包不必再分割

//应用层
//对收到的数据进行解包
//TCP协议之上常见的Email，HTTP，FTP等协议，这些协议就组成了互联网协议的应用层
//发送端：http报文-》加tcp首部-》加ip首部-》加以太网首部
//接收端：去以太网首部-》去ip首部-》去TCP首部-》http报文
//。
