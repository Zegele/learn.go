// Go语言实现RSA和AES加解密
// blog.csdn.net/LC_Liangchao/article/details/121769279  //RSA和AES 流程简介
// blog.csdn.net/chantor7/article/details/124588499
// https://the-x.cn/zh-cn/cryptography/Aes.aspx  //AES在线解密
// 9bingfa/shili29中涉及到部分加密使用，可参考
// https://www.kancloud.cn/imdszxs/golang/1509752
package main

//由于，RSA加解密速度慢，不适合大量数据文件加密，而AES加密速度很快
//所以，综合起来就是（AES+RSA）使用AES对称密码体制 对传输数据加密，
//同时使用RSA不对称密码体制来传送AES的密钥——
//AES加密传递数据，RSA传递AES的密钥

//1. RSA签名和验签的流程图 （非对称）
//特点：只需要交换公钥；公/私钥机制，公钥加密，私钥解密（或者私钥加密，公钥解密）
//公钥负责加密，私钥负责解密
//私钥负责签名，私钥负责验证
//缺点：加解密速度慢，特别是解密
//
//client:生成自己私钥，公钥，其公钥公开，并拥有Server的公钥
//消息Data --提取消息摘要--> client私钥加密 --> 签名S\
//													Server公钥加密 --> 密文C --传输-->Server
//										  消息Data/

//Server:生成自己的私钥，公钥，其公钥公开，拥有Client的公钥
//Server --自己的私钥解密-->密文 --得到--> 签名S --Client公钥解密-->消息摘要\
//																		--对比若相同--> 验签成功
//										消息data--提取消息摘要-->消息摘要/

//2. AES框图：（对称）
//特点：加解密用同一密钥
//有点：速度快，效率高
//存在的问题：密钥交换的问题
//		发送方								接收方
//		  |
//		加密密钥 -------->互联网---------> 接收加密密钥
//		  |									|
//		解密密钥						     解密密钥
//		  |									|
//明文--> 加密 --> 密文 -->互联网--> 密文 --> 解密 --> 明文

//3. AES+RSA = 数据加密方案
//					发送方					接收方
//					RSA公钥 <--  互联网 <--  RSA密钥对
//			  		  |						  |
//					  |						RSA私钥
//			  		  |						  |
//
//		  AES密钥---> 加密 ---->互联网-------> 解密-->解密后的AES密钥
//			|  		  |									|
//	明文	-->加密-->发送密文 ----> 互联网 ---->接收密文 --> 解密 --> 明文

//1. 接收方创建RSA密钥对
//2. 发送RSA公钥给发送方，自己保留RSA私钥
//3. 发送方创建AES密钥，加密待传送的明文，之后用RSA公钥加密该密钥
//4. RSA公钥加密(AES的密钥+AES密钥加密明文的密文)，
//5. 之后再用RSA解密后的AES密钥解密数据密文，得到明文。

//总结：返回数据使用AES加密，密钥
