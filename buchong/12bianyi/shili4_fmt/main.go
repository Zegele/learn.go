// go fmt 命令————格式化代码文件
// c.biancheng.net/view/4441.html
package main

import "fmt"

// gofmt介绍
//go语言的开发 gofmt工具统一代码风格。
//gofmt是一个cli程序，会优先读取标准输入，
//如果传入了文件路径的话，会格式化这个文件
//如果传入一个目录，会格式化目录中的所有.go文件
//如果不传参数，会格式化当前目录下的所有.go文件
//
//gofmt默认不对代码进行简化，
//使用-s参数可以开启简化代码功能，具体来说会进行如下的转换：
//1、去除数组、切片、Map初始化时不必要的类型声明
//[]T{T{}, T{}} 简化为 []T{{},{}}
//2、去除数组切片操作时不必要的索引指定
//s[a:len(s)] 简化为 s[a:]
//3、去除循环时非必要的变量赋值
//for x, _ =range v{...}  简化为 for x = range v{...}
//for _ = range v{...} 简化为 for range v{...}
//
//gofmt 命令参数如下：
//-l 仅把那些不符合格式化规范的，需要被命令程序改写的源码文件的绝对路径打印到标准输出
//而不是把改写后的全部内容都打印到标准输出
//-w 把改写后的内容直接写入到文件中，而不是作为结果打印到标准输出
//-r 添加形如 “a[b:len()] -> a[b:]”的重写规则
//如果我们需要自定义某些额外的格式化规则，就需要用到它
//-s 简化文件中的代码
//-d 只把改写前后内容的对比信息作为结果打印到标准输出
//而不是把改写后的全部内容都打印到标准输出
//命令程序将使用diff命令对内容进行比对，
//在windows下可能没有diff命令，需要另行安装
//-e 打印所有的语法错误到标准输出
//如果不适用此标记，则指挥打印每行的第1个错误且只打印前10个错误
//-comments 是否保留源码文件中的注释。 在默认情况下，此标记会被隐式的使用，并且值为true
//-tabwidth 此标记用于设置代码中缩进所有使用的空格数量，默认值为8
//要使此标记生效，需要使用 “-tabs”标记并把值设置为false
//-tabs 是否使用tab('\t')来代替空格表示缩进
//在默认情况下，此标记会被隐式的使用，并且职位true
//-cpuprofile 是否开启cpu使用情况记录，并将记录内容保存在此标记值所指的文件中
//
//可以看到gofmt命令还支持自定义的重写规则，使用-r参数。

func main() {
	a := 1
	b := 2
	//c := a + b
	c := b + a
	fmt.Println(c)
}

//gofmt -w -r "a + b -> b + a" main.go
//将源码中的 a + b 改变成了 b + a
//注意： gofmt使用tab来表示缩进，并且对行宽度无限制，如果手动对代码进行换行，gofmt不会强制把代码格式化回一行
//
//go fmt 和 gofmt
//gofmt 是一个独立的cli程序，而go语言中还有一个go fmt命令，
//go fmt命令是gofmt的简单封装
//go fmt 命令本身只有两个可选参数 -n 和 -x
//-n 仅打印出内部要执行的go fmt 的命令
//-x 命令既打印出go fmt 命令又执行它，如果需要更细化的配置，需要直接执行gofmt命令
//go fmt 在调用gofmt时添加了 -l -w 参数，相当于执行了 gofmt -l -w
