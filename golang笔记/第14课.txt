20：03复习

装到一个struct中是封装。

11，12，13课要重看。接口 要自己再重看。做作业没有看。
操作标准

20：21 
switch 断言
switch c.(type){
case Refrigerator, *refrigerator: //可以把多种类型放一行，只要有一个类型符合，就执行。

}


第14课正文
20：26
并发编程

什么是并发？
并发是多个程序或任务在一个机器或cpu上运行，在同一个时间点只有一个程序或任务在执行。
一个人办很多事。但速度快，看起来向同时在做。

20：35 什么是并行
并行是多个程序或任务在多个机器或多cpu上同时运行，在同一个时间点真的有多个程序或任务在执行。

20：46 计算素数

多个人办多个事，真正的同时在做

21：01 什么是goroutine
goroutine是golang内部实现的轻量级的并行技术。
golang通过go关键字启动一个共routine。
语法：go<function>()
<function>() 部分为执行一个方法、函数。该方法可以是全局方法，也可以是某个对象的成员方法。
例如：
go runSomething(xxx)
go func(**){ //匿名函数
xxxxx
}(**) // 注意：记住这里要调用函数

mainroutine 和 goroutine之间是并行的。

func TestHelloGoroutine(t *testing.T){
	go fmt.Println("hello, goroutine")//还没运行goroutine程序就结束了
}

func TestHelloGoroutine (t *testing.T){
	go fmt.Println("hello, goroutine")
	time.Sleep(1 * time.Second)//程序睡1秒，这就有时间执行goroutine了
}

21：12 goroutine特色
轻量级：占用资源少：2kb
高性能：1.没有线程上下文切换；2.golang内部实现专用调度器，可以在多个cpu上自由切换
易使用：1. 只需要go关键字即可启动；2. 不需要关注它的生命周期、资源回收等。
持久性： 只要主进程不退出，goroutine内的功能如果不结束，就永不退出。（所以我们要管控goroutine的声明周期）


21：19 使用goroutine

21：24 锁

21：27 .讲3个点。。。

21：39 什么是锁
锁是一种保障被锁保护的内容只有在拿到锁之后才能对内容进行阅读、修改的机制。
通常用在多线程、多routine的环境中保证操作的正确性、安全性。
例如：
1. 对共享数据的修改的正确性：统计字数中的totalNumber int
2. 对map 数据的并发的读写会引起panic


21：48 锁的注意事项（ppt）
1. 保证Lock和Unlock一定被调用（一定不要忘了Unlock）defer Unlock （如果程序还有很多才能defer，这种情况不宜使用defer）
2. 被Lock的内容的访问一定要经过锁的过程进行访问。//等锁 要尽快释放锁
3. 当没有拿到锁时，拿锁的过程会等待。
4. 锁有种类分别：同步锁，读写锁

