复习grpc
grpc的负载均衡，等配置，要自学。

19：09 grpc注意事项

1. 序列号一旦使用，不能更改
做了实例，要好好看

grpc-attention 的test中，有解析base64代码

2. 每个消息都是独立的个体
如 watch的消息都是独立的个体

3. 不完全支持golang所有的映射关系（如：map嵌套）
golang中可以这样做：testM := map[string]map[string]float64{}
			       姓名，        性别， 体脂 一一对应
也可以这样：type Name2Sex2BMI map[string]map[string]float64
testM := Name2Sex2BMI{} // 注意这个括号。 相当于实例化了？

但protobuf是定义不出来的。

19：34 很多企业都是这么做 扩展 的。 

message personalInfomation{
....=1;
string nation = 7;
repeated ExtraInfo extra  = 8;
//             类型       变量名
}

message ExtraInfo{
	string key = 1;
	string value = 2;

}


编辑表是很重的操作。


19：48 容器入门

1. 企业应用上线

启动应用：./server --port=8080 --mysql-addr=127.0.0.1:3306 -- mysql-....
	启动服务端应用，配置端口，配置数据库，数据库密码等。。。

真实的企业的安装过程：搭数据库，搭负载均衡器，配置数据库，配置集群，数据库测试ok，搭后端，配置（与负载均衡器等）关联

20：04
2. 企业中的困境

开发栈不同： 有golang发开的应用， 有java开发的应用（只能jre）， 有python开发的应用。。。

应用类型不同：数据库服务器，文件服务器，负载均衡器 。。。
依赖系统不同： Ubuntu服务器，CentOS服务器， 特殊硬件服务器 。。。

20：07
golang接口与容器
有没有像golang接口一样的设计，只要应用以遵守某个“接口”


容器技术是一种基于内核组技术将应用程序隔离在完全独立的空间中以独立运行的技术。
它将应用程序、依赖环境、配置等完全独立在各自的运行环境互不干扰。

容器镜像是将应用程序、环境等打包成符合开放容器接口规范的实体。


20：13 docker
docker version 
查看是否安装好

docker pull ubuntu:20.04
就开始下载了：
docker.io/library/ubuntu:20.04
下载了ubuntu的镜像（运行系统？）
mac上的用法：docker images | grep ubuntu
window上的用法：docker images -a 或 docker images --all
该命令查看 ubuntu的镜像是否下载成功。

docker images 什么意思？ 查看容器镜像
可以看看有哪些镜像

Containers/Apps容器
Images 镜像
Volumes 磁盘
Dev Environments 开发环境

docker pull alpine:3.13 //这个alpine很小，也可以支持运行golang代码

docker run -it ubuntu:20.04 bash
启动一个ubuntu的容器
-it 表示可以和容器做互动  以上的例子中：是和ubuntu里面的程序（bash）做交互。 启动了ubuntu中，一个叫的bash的程序
返回了：root@5c249ab4f8d4:/#
相当于有了一个ubuntu的运行环境（命令终端）。
表示有一个root，在5c249ab4f8d4主机上运行

可以和ubuntu做交互
输入：root@5c249ab4f8d4:/# hostname
返回：5c249ab4f8d4

哪个人在哪里开了个号（房子）
可以开很多个房子
docker run -it ubuntu:20.04 bash
root@83e468e67ee1:/# hostname
83e468e67ee1
root@83e468e67ee1:/# apt-get install vim
Reading package lists... Done
Building dependency tree
Reading state information... Done
E: Unable to locate package vim
root@83e468e67ee1:/#

ubuntu里touch是什么意思？？？ 新建一个文件夹？


不用安装，直接在docker中开一个想要的环境。不管是系统环境，还是数据库环境。
docker可以直接有个数据库的镜像
演示了怎么运行mysql上的表

问答：
go代码怎么在容器发布？
1. 编译容器镜像。
2. 镜像放在哪里。
3. 启动镜像，配置服务。

container orchestrator

怎样管理内存，cpu？
docker run --help //就会打印出很多命令，有设置cpu，内存等


怎样管理日志
一般日志都是在标准输出里。运行 docker logs  <Container ID> ，就会看到该 Container ID的日志。（容量有限的） ，也可以将日志放置在特定的文件中。
企业会做 日志收集器 


怎样批量管理镜像？
使用doker compost v2

怎样镜像安全？
购买docker官方的镜像扫描服务，扫描镜像
也可以跑一个 image scan clair 免费的

如何监控容器内服务资源消耗？
docker暴露一些指标，暴露一些普罗米修斯格式的matrix，用普罗米修斯就能画出相应的图。普罗米修斯监控

20：44 
1. 什么是容器镜像
容器镜像是将应用程序，环境等打包成符合开放容易接口规范的实体。

什么是容器镜像
 1. 怎么得到容器镜？
2. 怎么启动容器镜像？
3. 怎么部署我的应用呢？

00_cool 有命令参数 回看怎么设置和使用参数。

20：47
2. 编译容器镜像
go build ./main.go   go编译出的是main.exe文件
GOOS=linux go build ./main.go  编译出的是linux下的文件。
发现在goland的终端不能生成linux文件。得在git 中使用该命令才能生成linux文件。
GOOS=linux go build ./main.go  //行
GOOS=linux GOARCH=amd64 go build ./main.go  //也行
生成好这个linux系统的main文件


docker是用docker build 编译
docker build



dockerfile
Dockerfile是用来定义如何编译容器镜像的定义文件。
它拥有自己独立的语法。
最终编译出的容器镜像是不可修改的一个整体。

20：51
docker 语法
有个连接：
https://docs.docker.com/engine/reference/builder
ADD：添加文件到容器镜像中。 。 注：当是压缩包时，会自动解压。 把软件安装到镜像中
COPY：复制文件到容器中。
RUＮ：编译镜像时运行程序。
CMD：启动镜像时运行程序。
ENV:设置镜像的环境变量。

ls -alh //-alh 查看文件的权限，以及一些属性的信息

docker build --help 可以查看参数

通常在该文件（dockerfile）的文件夹下运行docker build

docker build -t hello:docker .
-t 后的参数是给docker文件一个名字。
示例：
docker build -t hello:docker .  // 最后的 . 表示目录，表示在该文件夹下，建立docker build
// -t hello:docker // -t是给它做了一个标签（hello是起的容器名字，docker是标签名）
文件名是hello， tag（标签）是docker


21：03
老师做的：
docker build --progress plain -t hello:docker .
// --progress plain 是防止 docker build 之后会覆盖一些东西。

docker build --no-cache --progress plain -t hello:docker .
// --no-cache 不要忽略掉什么？


mac: docker images | head
windows: docker images -a 
可以看见docker build生成的hello文件，在最顶上看到该hello文件
得到的这个文件，就是hello的（image文件）镜像文件

docker run -it hello:docker bash  //运行生成的hello文件，就进入hello环境了。
root@5c89c267587b:/# 
root@5c89c267587b:/# ls -lah  命令可以看到该环境的一些详细信息。

root@5c89c267587b:/# exit 就会退出该环境。
exit退出

但无法证明这个是我们的软件

所以就要安装软件，证明是我们的软件。

在上面我们生成好了 linux的main文件。接下来，docker build
docker build --progress plain -t lfs:1.0 .
就建立好了main 文件的docker环境

先跑起来
docker run lfs:1.0
// docker run 就是运行镜像的意思。

可以输入一下命令查看：
docker ps // 显示运行的docker的一些详细信息？ 在win+r 或 git bush上能看到
docker inspect 0d8bcfd5c4c4 | grep -i ipa //查看更详细的一些内容，这里是查ip
// 0d8bcfd5c4c4 是docker ps后查出的ID

docker ps | grep nginx
docker images | grep nginx // 输入该命令后，没有出现数据。。。。

docker exec -it 0d8bcfd5c4c4 bash // 该命令也有问题。。。

docker kill 0d8bcfd5c4c4  // kill 掉 这个docker 环境
ctrl+c是不能关闭该环境的

在服务器上，一般是：
docker stop 0d8bcfd5c4c4 // 关闭该环境


21：12
hub.docker.com 可以查看到各种镜像
可以搜索ubuntu ， centos（限制性的支持。貌似老师说这个挺可惜）， mysql, mariadb

21:15
3. 启动容器
docker run [options]<image>[commands]
例如：
docker run ubuntu:20.04 echo hello
docker run ubuntu:20.04 env

docker run --name learn.go-3307 -p 3307:3306 -v /Users/xiaoqiang/tmp/3307/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=learngo -d mysql:5.7.37
--name learn.go  //--name是给这个启动的容器起个名字，根据这个名字，可以记住，可以操控，方便使用
-p 3307:3306 // -p 就是端口映射 把3306映射到3307上。也就是使用3307
    前面的端口是主机的（host port），后面的端口是容器的(container port)
-v 跟的路径是，放到我自己的硬盘的位置，不用容器的硬盘
-e 设置的一些环境变量 ，这里设置的密码
-d 是什么？
要知道更多 docker run --help
21：23 要看演示，并理解，怎么和数据库关联等。

启动容器都是很轻量级的，可以启很多了



21：22
4. 编译容器镜像-高阶

1. 多步骤编译镜像
当我们需要一个镜像时，通常会需要编译环境，配置等，最终编译出我们需要的应用。
而应用运行时并不需要编译环境。
多步骤编译镜像会大大缩小最终产出的容器镜像的规模。

示例：
docker build --progress plain -t lfs:1.0.2 .

docker run lfs:1.0.7 ls /urs/local/bin/
返回main 说明bin文件夹下已有mian文件

多步骤编译，就是多个from。
第一个from是，专心编译我们需要的。
第二个from就是为，最后的产出，最终要用的镜像

这样就可以极大的缩小我们要用的镜像的体积。



21：38
2. 缩小起始目录
docker 命令运行时，会将docker命令运行时所在位置下的所有文件都发送到编译环境。
如果减少不必要的文件，可以大大减少编译时的文件拷贝规模，从而加快编译速度。

docker images | grep golang

1. 在干净的文件夹下编译
2. 配置docker   ，忽略某个文件夹
.dockerignore


21：36
发布
都弄好了发布镜像   自己要注册个hub.docker？
1. 镜像仓库
镜像仓库是专门存储镜像的地方，类似于github存储代码一样。
docker hub是其中一个公开的镜像仓库：https://hub.docker.com

演示了怎样创建镜像仓库
tag很重要
docker tag --help
提示用法：Usage: docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]
docker tag lfs:1.0.6 armstrong/lfs:1.0.6
// armstrong是老师自己注册的  // lfs是老师创建的一个镜像仓库
docker images -a
显示除了 lfs:1.0.6这个
还有armstrong/lfs:1.0.6这tag的镜像了

21：41
2. 镜像推送
docker tag <image tag> <image tag>
例如： docker tag lfs:1.0.8 armstrongli/lfs:1.0.8  //lfs:1.0.8是镜像名和tag（1.0.8），armstrongli/lfs:1.0.8是网上的镜像仓库路径，和tag（1.0.8）
docker push <image tag>
例如：docker push armstrongli/lfs:1.0.8 //则开始向网上的镜像仓库推送。

接发布，老师演示如下：
docker login  登录 需要数据用户名和密码
登录后
docker push armstrongli/lfs:1.0.6
推送过程要花点时间。
这样就推送上去了，成功后其他人就能pull了。使用你的镜像


21:44
3. 部署应用（在服务器上）
docker pull <image tag>
docker run xxx

注意：
配置参数，配置数据 
tag要选对

推荐学习：
Docker compose
适用于中小企业，一键化部署。
github.com/docker/compose
有官方教程


Kubernetes // 产品级容器
云平台，云原生，更复杂
https://kubernetes.io
网页有中文的
有文档挨着看，文档内容很多

《Kubernetes in Action》 书 适合初学


改变dockers desktop的total size，参考：
https://blog.csdn.net/z2431435/article/details/123316551

容器：把我们的应用程序编成镜像，把镜像推送，作为容器的镜像作为程序启动起来。