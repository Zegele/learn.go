20：00 讲重构
定义接口
定义接口类型的切片
循环接口切片，就可以运行满足接口的各种结构体的动作。
很妙

推荐书籍《平台战略》

参考视频：MySQL安装：
MySQL服务：https://www.bilibili.com/video/BV1dA411M7q1?spm_id_from=333.999.0.0
MySQL workbench：https://www.bilibili.com/video/BV155411N7RT?spm_id_from=333.999.0.0


20：12 复习数据库

20：26 数据库基本操作
crud (创建，读取，更新，删除)
creat read undate delete 
增删查改

每种数据库都有自己的数据库定义语言（DDL），比如：创建表、修改表、添加索引等。
大部分数据库兼容相同的数据操作语言（DML），比如：增加、删除、更新、查询等。

1. SELECT
语法：
SELECT <column name>, <column name>,<colume name>FROM<real or virtual table> WHERE <column name>, < ><= > '<value>'

where and(or)

排序： order by <column name> asc(desc)  // asc表示从小到达排序  ,decs表示从大到小排
限制： limit 5 只要5行数据
游标： offset 5 跳过5个数据，开始

更多的sql语言，自己扩展学习。

不等于: <>
如果是字符串类型：  '<value>'
-- xx --表示注释
## 表示单行注释
/*
*/ 表示多行注释



例如：
SELECT *FROM personal_info;
SELECT name FROM personal_info;

select * from personal_information;
select * from personal_information Where sex = '女';
select * from personal_information id，age Where sex = '女' order by id desc  limit 2 offset 1 ;

2. INSERT
语法： 
INSERT INTO <real table>[(<column name>, <column name>, ...)] VALUES (<column value>, <column value>,...);

例如：
insert into personal_info(name, sex, tall, weight, age) values('小强'，'男',1.7,70.0,35);


3. UNDATE
语法：
UPDATE <real table> SET <column name> =<column value>, <column name> =<column value>,... [where <column name> = <column value>, ...]

例如：
update personal_info set tall = 1.71 where id = 1;

4. DELETE
语法
DELETE FROM <real table> [where<column name> = <column value>, ... ]

注意事项：
Update\delete 操作务必确保where配置正确。


21：12 golang与数据库交互
1. 建立数据库连接
import(
	"database/sql"
	_"github.com/go-sql-driver/mysql" // 引用这个包，但不用里面的东西。需要他里面的初始化。
)
import驱动包（注意：不同的数据库，驱动包不同）
扩展：检索：golang connect postgres // PostgreSQL 数据库   不同的数据库，使用不同的驱动器
          检索：golang connect mongo //MongoDB 数据库
	
learnDB, err  := sql.Open("mysql","root:learngo@tcp(127.0.0.1:3306)/learngo")
连接数据库注意：不同的数据库，连接字符串不同。 MySQL：<username>:<password>@tcp(<ip>:<port>)/<database name>

spl语句：例如select等
将查询 结果 scan到golang变量中。
继而就可以marshal等操作

2. 操作数据库


思考：
1. SELECT 的列与代码Scan部分强行绑定，代码很容易成为固定逻辑，尤其是select * from xxx 这样的语句，怎么避免这样的问题？如果表的结构变了，代码就直接出错了，怎么办？

2. 据说有SQL注入的风险，怎么避免SQL注入？

3. 代码里面嵌入SQL的语句，对写Golang的人很不友好，怎么让Golang代码更优雅？




21:48 ORM
1. 什么是ORM
ORM（object- relational mapping）是对象与关系型数据库之间的映射关系。
ORM建立了编程语言中对象（如：struct）与数据库的元数据（如：table）之间的映射关系。

1. 简单易用：对象即表，自动映射。
2. 易于理解：操作过程只有对象，无需关注底层SQL。
3. 定义精确：对象类型与数据库类型精确匹配。


1.2. 什么是GORM
GORM 是纯Golang的一个ORM框架：https://gorm.io/zh_CN/

import(
	_ "gorm.io/driver/mysql"
	_ "gorm.io/gorm"
)

go mod tidy 后，上述包就自动安装好了。


2. Golang struct 与 数据库表
1. 连接数据库
2. 创建个人信息表
3. 编写个人信息对象
4. ORM

3. ORM基本操作
自动生成连接struct与数据库的对应关系，网址：https://github.com/favadi/protoc-go-inject-tag
@gotags: valid:"ip"
go get github.com/favadi/protoc-go-inject-tag
go install github.com/favadi/protoc-go-inject-tag@latest // 在src/bin文件夹中生成了可运行文件。

然后再apis 文件夹下，运行：protoc --go_out=. --plugin= types.proto 生成pb.go文件

继续运行：protoc-go-inject-tag -input="*.pb.go"，运行完成后，apis下的标准 结构体 后就会有gorm的标记。


protobuf+gorm 厉害 不明觉厉
https://github.com/favadi/protoc-go-inject-tag