
特殊类型

20：10 类型重命名
type A = int

20：23
func (std *student) voteA(target *student){//是*student结构体的方法，同样参数是该结构体，   ，看，还在。，
	target.agree++
}

指针类型的返回值，可以返回nil

20：29断网 讲到随机了 重看
RVF
D..
aXCVN Y0T
20：31 类型（对象）重定义
type ConvInt int

20：42 []byte{}    byte的切片可以转成string
type Foooo Func() 定义了一个方法怎么用？在goland里试试

20：45 断电

类型（对象）重定义用于扩展

20：54 作业：电梯
楼层数组 
有灯
按后电梯过来
每秒走一层
如果有多人按电梯：{向第一按按钮的楼层出发；
}

21：06 接口
ZWs	回调函数 类似掏军符 签名

21:30
建立一套操作系统与不同文件系统交互的标准，就叫接口。
1. 接口定义中只有方法    接口中定义方法签名
2. 接口时引用类型
3. 接口实例化时，接口不能直接使用变量，必须指向实现。
如，不能这样：var putER PutElephantIntoRefrigerator // 空指针
putER = PutElephantIntoRefrigerator{} // 对指针不能这样实例化，没有指向实体。

所以，接口必须对接到结构体上，才能实现接口中的方法集。如下：
var legend PutElephantIntoRefrigerator = PutElephantIntoRefrigeratorImpl{} 
// 定义legend是一个接口，对接到Put...Impl{}结构体上。把这个对象（结构体）给这个接口。
该结构体就可以使用这个接口了。如下：

legend .OpenTheDoorOfRefrigerator(refrigerator) //Open..函数是接口中的一个方法。

4. 接口中没有严格的implement关键字限制。不能让接口和结构体进行严格绑定。所以接口的使用很灵活。而灵活是双面的。

5. 必须实现所有的接口方法，才叫做实现接口，否则不算。

6. 不限类型（不限于只有结构体实现接口）
只要定义了一个特定的类型，它有自己的方法，接口中也有该方法，那它就可以实现接口。如下：
type TestTypeImplInterface func() // 类型重定义了一个函数类型

func(t TestTypeImplInterface) OpenTheDoorOfRefrigerator() error{//该类型有自己的方法。如果接口也有该方法，则TestTypeImplInterface 就可以实现该接口。
return nil
}   

7. 同一个对象，可以实现多个接口。

8. 接口之间可以组合，嵌套 （c = a + b +c, 也可以是c=(a+b)+(b+c)）
小接口可以给大接口赋值，大接口不能给小接口赋值。

9. 空接口 interface{}
any = 黑盒子
var i interface{}
i = refrigerator //方法
i = elephant
i = legend
i = 33
i = "string 44"
i = map[string]Elephant{}
fmt.Println(i)


实现接口需要有个中介（如struct，很多定义好的类型都可以）

22：00 没看懂 open close （复看看懂了）

22：01 接口嵌套

grf 

这是prometheus的一个核心引擎的接口定义，大家可以看看：
https://github.com/prometheus/prometheus/blob/main/promql/engine.go 