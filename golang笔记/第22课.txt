复习


开始
20：22 数据 

数据要：
1. 能保存
2. 能使用

20：40 存取


20：44 文件读取
linix命令？
ls 
pwd等

golang通过File和File的成员方法来完成文件的操作。
Read方法和Seek方法用于读取、定位文件。
Read(b []byte)(n int, err error)
将


20：51 文件读取
Golang通过File和File的成员方法来完成文件的操作。
Read方法和Seek方法用于读取、定位文件。
1. Read(b []byte)(n int, err error) // 适合分段读
将读取的数据放入一个byte切片

2. Seek(offset int64, whence int) (ret int64, err error)
根据whence定位位置

也可以通过golang官方提供的工具函数：
data, err := os.ReadFile("路径/xxx.txt") // 这个方法是一次读完整个文件。要么读完，要么崩溃。
// handle error
fmt.Println(data)

20：55
如果程序是异常退出的，退出编码不是0。正常运行退出的退出编码是0。
$? 运行看到退出编码 

4096的整数倍分配内存
查看文件大小：-s -h 1 深度1的大小
du -sh


21：24 文件保存（写入）
Golang通过File和File的成员方法来完成文件的操作。
Write相关方法和Seek方法用于写入、定位文件。
1. Write(b []byte)(n int, err error)
将 b 中包含的内容写入到Seek定位的地方。

2. WriteString(s string)(n int, err error)
写入string 字符串

3. WriteAt(b []byte, off int64)(n int, err error)
在指定位置写入b包含的内容 


21：37 文件操作符
Golang官方还提供了具备特殊功能的文件操纵：
1. 创建文件方式
2. 只读打开
3. 只写打开
4. 读写打开
5. 写入时追加的方式打开
6. 同步IO的方式打开
7. 其他


21：45 编码
目的是为了语言相通。
1. JSON
2. YAML(鸭猫)
3. PROTOBUF 和jrpc联系起来，很强大。还听不懂

通常JSON，PROTOBUF最多
2是用于表述，归档等。
少数还在用XML

https://github.com/protocolbuffers/protobuf/releases
https://github.com/protocolbuffers/protobuf-go/releases
安装参考1：protobuf: https://blog.csdn.net/lff1123/article/details/122656260
安装参考2：https://blog.csdn.net/u013755520/article/details/91375830
安装参考3：https://download.csdn.net/download/weixin_38752459/14041243
我的做法：把protoc解压在了e盘，在环境变量Path中添加了protoc的bin文件路径。
然后把下载的protoc-gen-go.exe文件复制到了，GOPATH/bin下，和protoc/bin文件夹下。

安装docker
下载docker（windows）
https://hub.docker.com/editions/community/docker-ce-desktop-windows

windows 安装 docker
安装docker参考1：https://www.runoob.com/docker/windows-docker-install.html
windows中没有Hyper-v的情况下，参考（已验证可行，运行后Hyper出现在windows功能中）：https://blog.csdn.net/lanxingxing666666/article/details/111354089

git或power shell 中输入：docker run hello-world
看有没有有关的返回提示。如果有则说明可正确运行。

安装docker参考2：https://blog.csdn.net/weixin_39912640/article/details/120391027
（后半部分没看懂，涉及到使用docker）


补充知识：
千峰韩茹老师：bilibili.com/video/BV1Hx411Z78D?p=5 //视频
https://github.com/Zegele/Golang-100-Days/blob/master/Day16-20(Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E8%BF%9B%E9%98%B6)/day16_file%E6%93%8D%E4%BD%9C.md      //配合视频课件


一、File文件操作
1. FileInfo接口
FileInfo接口中定义了File信息相关的方法。
type FileInfo interface{
	Name() string // base name of the file 文件名.扩展名 aa.txt
	Size() int64 // 文件大小，单位是：字节数
	Mode() FileMode // 文件权限 -rw-rw-rw-
	ModTime() time.Time // 修改时间 2022-01-11 20：20：20 +0800 CST
	IsDir() bool // 是否为文件夹（如果不是文件夹，就是文件）
	Sys() interface{} // 基础数据源接口（can return nil） 
}

2. 权限
至于操作权限perm，除非创建文件时才需要指定，不需要创建文件时可以将其设定为0.
虽然go语言给perm权限设定了很多的常量，但是习惯上也可以直接使用数字，如0666（具体含义和Unix系统的一致）
权限控制：
linux下有2种文件权限表示方式，即“符号表示”和“八进制表示”。
2.1. 符号表示方式：
- 		---		---		---
type表示 文件类型      owner		group 		others
文件的权限是这样分配的： 读、写、可执行；分别对应的时r, w, x 如果没有哪一个权限，用 - 代替
（- 文件 d目录 | 连接符号）
例如： -rwxr-xr-x (- rwx r-x r-x) //-表示是文件，owner, group, others

2.2. 八进制表示方式：
r  --> 004
w --> 002
x  --> 001
-  --> 000
0755 文件 owner可读可写可执行，group可读可执行，不可写，others可读可执行，不可写

3. 打开模式
文件打开模式：
const（
	O_RDONLY int = syscall.O_RDONLY // 只读模式打开文件
	O_WRONLY int = syscall.O_WRONLY // 只写模式打开文件
	O_RDWR int = syscall.O_RDWR // 读写模式打开文件
	O_APPEND int = syscall.O_APPEND // 写操作时将数据附加到文件尾部
	O_CREATE int = syscall.O_CREAT // 如果不存在将创建一个新文件
	O_EXCL int = syscall.O_EXCL //和O_CREAT配合使用，文件必须不存在（所以这个是干嘛的呢？？？）
//参考syscall.O_EXCL的用法：https://www.jianshu.com/p/e1de8fc52718
	O_SYNC int = syscall.O_SYNC // 打开文件用于同步I/O
	O_TRUNC int = syscall.O_TRUNC // 如果可能，打开时清空文件
）

4. File操作
type File
// File 代表一个打开的文件对象。

func Create(name string)(file *File, err error) //创建空文件，可读可写，不可执行
// Create采用模式0666（均可读可写，不可执行）创建一个名为name的文件，如果文件已存在会截断它（为空文件）。如果成功，返回的文件对象可用于I/O;对应的文件描述符具有O_RDWR模式。如果出错，错误底层类型时*PathError

func Open(name string)(file *File, err error) // 打开一个文件，只读
// Open 打开一个文件用于读取。如果操作成功，返回的文件对象的方法可用于读取数据；对应的文件描述符具有O_RDONLY模式。如果出错，错误底层类型是*PathError。

func OpenFile(name tring, flag int, perm FileMode) (file *File, err error)
// OpenFile 是一个更一般性的文件打开函数，大多数调用者都应用Open或Create代替本函数。它会使用指定的选项（如O_RDONLY等）、指定的模式（如0666等），打开指定名称的文件。如果操作成功，返回的文件对象可用于I/O；对应的文件描述具有O_RDWR模式。如果出错，错误底层类型是*PathError。

func NewFile(fd uintptr, name string)*File // 没有理解
// NewFile使用给出的Unix文件描述符和名称创建 一个文件。

func Pipe()(r *File, w *File, err error)
// Pipe 返回一对关联的文件对象。从r的读取将返回写入w的数据。本函数会返回两个文件对象和可能的错误。

func (f *File) Name()string
//Name 方法返回（提供给Open/Create等方法的）文件名称。

func (f *File)Stat()(fi FileInfo, err error)
// Stat 返回描述文件f的FileInfo类型值。如果出错，错误底层类型是*PathError。

func (f *File) Fd() uintptr
// Fd返回与文件f对应的整数类型的Unix文件描述符。

func (f *File) Chdir() error
// Chdir 将当前工作目录修改为f，f必须是一个目录。如果出错，错误底层类型是*PathError。

func(f *File)Chmod(mode FileMode)error
// Chmod 修改文件的模式。如果出错，错误底层类型是*PathError。

func (f *File)Chown(uid, gid int) error
// Chown 修改文件的用户ID和组ID。如果出错，错误底层类型是：*PathError

func (f *File) Close() error
// Close 关闭文件f， 使文件不能用于读写。它的返回可能出现的错误。

func (f *File)Readdir(n int)(fi []FileInfo, err error)// 没懂
// Readdir 读取目录f的内容，返回一个有n个成员的[]FileInfo，这些FileInfo是被Lstat返回的，采用目录顺序。对本函数的下一次调用会返回上一次调用剩余未读取的内容的信息。如果n>0, Readdir函数会返回一个最多n个成员的切片。这时，如果Readdir返回一个空切片，它会返回一个非nil的错误说明原因。如果到达了目录f的结尾，返回值err会是io.EOF 。 如果n<=0, Readdir函数返回目录中剩余所有文件对象的FileInfo构成的切片。此时，如果Readdir调用成功（读取所有内容知道结尾），它会返回该切片和nil的错误值。如果在到达结尾前遇到错误，会返回之前成功读取的FileInfo构成的切片和该错误。

func (f *File)Readdirnames(n int)(names []string, err error)
// Readdirnames 读取目录f的内容，返回一个有n个成员的[]string， 切片成员为目录中文对象的名字，采用目录顺序。对本函数的下一次调用会返回上一次调用剩余未读取的内容的信息。如果n>0，Readdir函数会返回一个最多n个成员的切片。这时，如果Readdirnames返回一个空切片，它会返回一个非nil的错误说明原因。如果到达了目录f的结尾，返回值err会是io.EOF。如果n<=0，Readdirnames函数返回目录中剩余所有文件对象的名字构成的切片。此时，如果Readdir调用成功（读取所有哦内容直到结尾），它会返回该切片和nil的错误值。如果在到达结尾前遇到错误，会返回之前成功读取的名字构成的切片和该错误。

func (f *File)Truncate(size int64)error
// Truncate 改变文件的大小，它不会改变I/O的当前位置。如果截断文件，多出的部分就会被丢弃。如果出错，错误底层类型是*PathError。

二、 I/O操作
I/O操作也叫输入输出操作。其中I指Input， O是指Output，用于读或者写数据的，有些语言中也叫流操作，是指数通信的通道。
Golang标准库对IO的抽象非常精巧，各个组件可以随意组合，可以作为接口设计的典范。

1. io包
io包中提供I/O原始操作的一系列接口。它主要包装了一些已有的实现，如os包中的那些，并将这些抽象成为实用性的功能和一些相关的接口。
由于这些接口和原始的操作以不同的实现包装了低级操作，客户不应假定他们对于并行执行是安全的。
在io包中最重要的是两个接口：Reader和Writer接口，首先来介绍这两个接口。
1.1 Reader接口的定义，Read()方法用于读取数据。
type Reader interface{
	Read（p []byte）(n int, err error)
}
Read 将len(p)个字节读取到p中。它返回读取的字节数n （ 0<= n<=len(p) ）以及任何遇到的错误。即使Read返回的 n<len(p)， 它也会在调用过程中使用p的全部作为暂存空间。若一些数据可用但不到len(p)个字节，Read会照例返回可用的东西，而不是等待更多。
当 Read 在成功读取 n > 0个字节后遇到一个错误或EOF情况，它就会返回读取的字节数。它会从相同的调用中返回（非nil的）错误或从随后的调用中返回错误（和n==0）。这种一般情况的一个例子就是Reader在输入流结束时会返回一个非零的字节数，可能的返回不是 err == EOF 就是 err == nil。无论如何，下一个Read都应当返回 0, EOF。
调用者应当总在考虑到错误err前处理n>0的字节。这样做可以在读取一些字节，以及允许的EOF行为后正确地处理I/O错误。
Read 的实现会阻止返回零字节的技术和一个nil错误，调用者应将这种情况视作空操作。

1.2 Writer接口的定义，Write()方法用于写出数据。
type Writer interface{
	Write(p []byte)(n int, err error)
}

Write 将len(p)个字节从p中写入到基本数据流中。它返回从p中被写入的字节数n( 0<=n<=len(p) )以及任何遇到的引起写入提前停止的错误。若Write返回的n<len(p)，它就必须返回一个非nil的错误。Write不能修改此切片的数据，即便它是临时的。


1.3 Seeker接口的定义，封装了基本的Seek方法。
type Seeker interface{
	Seek(offset int64, whence int)(int64, err)
}

Seeker 用来移动数据的读写指针
Seek 设置下一次读写操作的指针位置，每次的读写操作都是从指针位置开始的。
whence的含义：
	如果 whence 为 0 ： 表示从数据的开头开始移动指针
	如果 whence 为 1： 表示从数据的当前指针位置开始移动指针
	如果 whence 为2 ： 表示从数据的尾部开始移动指针

offset 是指针移动的偏移量

返回移动后的指针位置和移动过程中遇到的任何错误。

1.4 ReaderFrom接口的定义，封装了基本的ReadFrom方法。
type ReaderFrom interface{
	ReadFrom(r Reader)(n int64, err error)
}

ReadFrom 从 r 中读取数据到对象的数据流中
	直到 r 返回 EOF 或 r 出现读取错误为止。
	返回值 n 是读取的字节数
	返回值 err 就是 r 的返回值 err 

1.5 WriteTo 接口的定义，封装了基本的WriteTo方法。 
type WriterTo interface {
	WriteTo(w Writer)(n int64, err error)
}

WriterTo 将对象的数据流写入到w中
	直到对象的数据流全部写入完毕或遇到写入错误为止。
	返回值 n 是写入的字节数
	返回值 err 就是 w 的返回值 err

1.6 定义 ReaderAt 接口， ReaderAt 接口封装了基本的 ReadAt方法
type ReaderAt interface{
	ReadAt (p []byte, off  int64)(n int, err error)
}

ReadAt 从对象数据流的off 处读出数据到 p 中
	忽略数据的读写指针，从数据的起始位置偏移off处开始读取
	如果对象的数据流只有部分可用，不足以填满p
	则 ReadAt 将等待所有数据可用之后，继续向p中写入
	直到将p填满后再返回
	再这点上ReadAt要比Read更严格
	返回读取的字节数n和读取时遇到的错误
	如果 n<len(p)，则需要返回一个err值来说明
	为什么没有将p填满（比如： EOF）
	如果 n = len(p), 而且对象的数据没有全部读完，则
	err将返回nil
	如果  n = len(p),而且对象的数据刚好全部读完，则
	err将返回EOF或者nil（不确定）

1.7 定义WriterAt接口， WriterAt接口封装了基本的WriteAt方法。
type WriterAt interface{
	WriteAt(p []byte, off int64)(n int, err error)
}
WriteAt 将p中的数据写入到对象数据流的off处。
	忽略数据的读写指针，从数据的起始位置偏移off处开始写入
	返回写入的字节数和写入时遇到的错误
	如果n<len(p)，则必须返回一个err值来说明
	为什么没有将p完全写入