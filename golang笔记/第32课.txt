hub.docker.com  //docker（镜像）库
可以上传自己的，也可以搜索。如搜索的apache（阿帕奇）
apache（ 阿帕奇）： 最常用的web server

20：11
企业级项目实践思维

1. 多版本
	1.1 数据是企业中最宝贵的
	1.2 任何代码、配置的变更需向后兼容
	1.3 程序、配置的迭代要循序渐进
2. 事件驱动 （不过于复杂）
	2.1 每一 bit 都是企业的财富，也是投入。
	2.2 每个事件都有发起方、接受方。
	2.3 提高效率能够大大节省投入
3. 模型驱动
	3.1 从头到尾都成功，才算成功。
	3.2 事情越复杂，成功的可能性越低。
	3.3 只要向着目标，总会成功。


什么是多版本
版本是指应用程序与配置的组合的特定状态。
任何程序行为、配置的变更，都会产生一个新版本。
例如：
windows 10， windows 11等
Android O， Android P 等

什么是向后兼容
向后兼容是指应用程序升级到新版本后任然支持上一个或多个版本提供的完整功能。
例如：
支持web服务的体脂计算器
增加gRPC服务的体脂计算器
等等


多版本发布
企业应用发布时，会有一段事件有个版本同时运行的状态。
企业应用发布时，需根据升级内容决定如何升级：
	1.1 停服升级
	升级过程中需要终止所有的服务，保证升级内容。
	1.2 无缝升级
	升级过程中无缝衔接，升级前后不影响现有服务。



多版本发布-无缝升级
无缝升级的关键在于验证新版本的功能是否符合预期，然后决定是否继续升级剩下的所有应用，还是停下来，或者把已经升级的新版本恢复到老版本。

常用方案：
在负载均衡器或类似功能上调整两个版本分担的业务量，并验证结果。
如果符合预期，则逐渐把更多的业务量调整到新版本上，老版本全部替换完成。


20：54 
事件驱动
21：00  docker演示
事件驱动概念

事件驱动是指通过发布，订阅机制将事件的发起者和事件的消费者连接起来的松散绑定的设计。
1. 发起者： 事件的发布者。他只发布事件，但不关注具体谁来消费此次事件。例如：发微博的人并不关注具体哪些人关注了他；操作系统内发生的很多事件，系统只会通过发布事件消息到系统消息总线中，而不去关注哪些软件会监听什么消息。

2. 事件消费者：消息的消费者。他通过关注某些事件，并由针对性的处理过程来消费这些事件，从而完成自己的业务逻辑。
例如：微信公众号关注疫情播报信息，以确定屯多久的食材；手机软件订阅系统的通话状态信号，以在有通话时及时存档。




基本事件驱动
部署5个体脂排行榜后端，需要：
	虚拟机服务：创建5个虚拟机
	环境安装服务：安装docker环境
	应用安装服务：
		传输docker compose 脚本
		在每台虚拟机上运行compose安装后端

企业服务总线 eds 或 ems


企业项目事件驱动
开发栈不同
	有golang开发的应用
	有java开发的应用
	有python开发的应用
应用类型不同
	数据库服务器
	文件服务器
	负载均衡器
依赖系统不同
	Ubuntu服务器
	CentOS服务器
	特殊硬件服务器


企业陷入：
数据库服务异常
服务器关机
系统重启
新服务上线
服务线上内存告警
http证书即将过期
。。。


21：14
演示 kubernetes
先在docker 中安装kubernetes 
终端 输入 
kubectl --help // 可以看到命令介绍 kubenetes control
kubectl config get-contexts // 可以看到其中有一个docker-desktop 

kubectl config use-contexts docker-desktop // 跳转到docker-desktop（返回Switched to context "docker-desktop" ）
//已经进入 kubernetes了
老师用了一个例子,启动nginx，如下：
apiVersion: apps/v1
kind: Deployment
metadata:
	namespace:learn
	name:nginx
spec:
	replicas:3
	selector:
		matchLabels:
			run: nginx
	template:
		metadata:
			labels:
				run: nginx
		spec:
			containers:
				name: nginx
				image: nginx:stable-alpine

模型驱动

目标
模型驱动概念
模型驱动是以定义一组期望为模型，并通过协作达到目标的一种软件设计思路。
模型通常包含两组定义：期望状态，实际状态
各组件负责自己负责的部分，根据期望状态行动，并将目前的状态反馈到实际状态。

要有反馈机制

模型驱动设计
期望状态			迭代			实际状态
	5个后端服务	<--排行榜部署服务-->	0个后端服务
	5个虚拟机		<--虚拟机服务-->		0个虚拟机	
	5个运行环境	<--环境安装服务-->		0个运行环境
	5个后端实例	<--应用安装服务-->		0个后端实例

实战：部署分布式体脂排行榜


模型驱动
解耦：模型驱动弱化组件之间的关联关系
高效：实际爱你驱动提供核心动力
简单：只关注现实与理想的距离。

21：35 实战
实战分析
期望状态：
	n个后端服务器
	1个负载均衡器
	后端服务器配置在负载均衡器上

部署实例服务：x个实例  ——>  x个容器  ——>  x个IP地址
负载均衡服务：发现X个IP地址 ——> 动态加载配置

老师的模型例子：
type RankServiceBackend struct {
	Name string
	Expected struct{
		Image string
		Command []string
		Count int
	}
	Status struct {
		RunningCount int
		InstanceIPs []string
	}
}

建模
预期 <- - > 实际

启动了一个etcd

然后创建了models

grpc里废弃的 标记为 deprecated 废弃的 因为grpc中编号是不能删除的。