常用的读文件，
ioutil.ReadAll()
ioutil.ReadFile("文件路径")

ioutil.WriteFile("路径", data, xxx) // data是要写入的内容，xxx是一些option




灵活度

体脂+web+数据库
不是直接从内存拿数据，是部分数据从数据库拿。


19：21 安装一个gorm插件

如何设置高并发
如果能从内存返回数据，是最快的。
怎么把数据库(磁盘)的数据放内存？

现成的组件
mar??

19：28 有关log
每个公司都有自己的log框架
https://github.com/sirupsen/logrus  // 查看该log框架 ，很多公司使用这个log err 的框架
 

19:53
redis 内存数据库  
搜索 memcache github
memcache组件 

golang 内嵌技巧 
案例中的内嵌，相当于缓存。已经把数据库的数据拿到内嵌中了。
把需要落库的放入数据库，主程序已经有的数据，直接使用，而不是再去数据库拿数据。
这样就会更快一些。


20：04 
第六次作业


20：10
范式数据库
反范式数据库 ：有冗余的数据

20：20 企业级应用开发

1. 为什么要分布式
单点部署：所有服务部署在同一台机器上时，称为单点部署。
单点部署优缺点：
优点：
1. 部署简单
2. 容易维护

缺点：
1. 单点故障
2. 吞吐量受限

分布式概念：
为了满足企业对服务的质量要求，通常会将应用进行模块划分，并将每个模块的各个组件部署在多台服务器上，以满足当单台服务器或多台服务器出故障或维护时，不中断服务或大多数服务不受影响。
这种服务不是的方式即为分布式部署。

分布式优缺点：
优点：
稳定可靠
容量大

缺点：
系统复杂
维护门槛高

20：50 负载均衡器
硬件负载均衡器
演示的是软件的负载均衡器

常见的负载均衡器：nginx
20：51 不能按照视频进行同步操作

！！！！报错
！！！！报错 git/data不存在，必须要绝对路径。







2. 分布式概念
mysql group replication 最终一致性
主从式
多主式

21：05 
老牌的nginx
Envoy 负载均衡器的新秀
硬件的负载均衡器很贵：f5


3. 应用与分布式
根据应用是否有状态，将应用分为：无状态应用，有状态应用
无状态应用：应用的每个实体提供完全一致的功能，每次服务的内容为一次性服务或任何一个实体均可在任何时间互相替换。
如：
网页前端服务
后端计算服务
代理服务
等




有状态应用
应用的每个实例因数据内容的差异而提供不同类型、功能的服务，或在服务中扮演了特定的角色。在服务时，它不可替代或者需要特定操作后方可替代。

数据库服务

存储服务

文件服务器

等等



21：22 
分布式新秀 etcd

4. ETCD
Etcd是一个基于最终一致性算法的分布式键-值对存储应用。
当它以集群方式部署时，是典型的分布式服务：
1. Leader：etcd集群中，只有leader可以接受写入操作；leader向集群中所有成员发送消息，在多数成员认可后leader才会答复请求表示完成。
2. Member：集群成员，总是跟随leader。
3. Candidate: 当member是去与leader的联系且超时后会转为candidate角色并准备重新发起leader选举。

21：38
举例了01_coll的命令使用，如下：
生成.exe文件后，
//./00_cool.exe --help  查看有哪些参数可用。
//./00_cool.exe --port 8080 把端口设置成8080 运行。默认端口是8089。

https://etcd.io/docs/v3.5/

etcd 除了支持基本的Get、Put之外，还支持Watch（监听）。
当Watch的内容发生变动时，etcd服务器会主动推送变更到客户端。

etcdctl --endpoints localhost:2379 watch a

etcdctl --endpoints localhost:2379 watch a 1
etcdctl --endpoints localhost:2379 watch a 2
etcdctl --endpoints localhost:2379 watch a 3

最终一致性 
无法克服的数据丢失

etcd 就是用golang写的

event driven 事件驱动（分布式系统常用的）
事件驱动：如果有动静才会反应。


22:07 答疑
gmp  分布式channel
