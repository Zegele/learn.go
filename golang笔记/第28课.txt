
javascript  前端语言

ant.desig n
charts.ant.design 有很多可视化 图表等

codesandbox.io 可视化？？


post 用于创建
put 用于更新
patch 局部更新
delete 用于删除

20:28 gin
使用gin的场景

20：33
1. 你好gin

handler 处理



2. gin与HTTP基本操作
get

post

put

delete


20：54 
3.gin与请求模板（url的query不用自己设置的意思？）
ulr是有意义的（比如读取到url，程序就可以去哪个磁盘的哪个区去找数据，这样提高了效率）

三遍代码：第一遍：实现需求； 第二遍：研究代码，提出技术层，业务层。 第三遍：重构， 接口化等。


uuid 宇宙唯一的id

21:15
get 时，一般body中是没有东西的，是通过路径给数据的。（这个路径是指url？）


21：19
4. gin插件 pprof插件
github.com/gin-gonic/gin    //所有的框架
github.com/orgs/gin-contrib/repositories?type=all   //gin插件
其中有个pprof插件  goroutine泄露，内存泄露，bug等， 看服务器处于什么状态。

启动服务器后： 如：localhost:8081/debug/pprof   // 可以查看目前服务器运行的状态。 不过是以文本形式展现


pprof 貌似是看golang代码效率的？检查泄露

go tool pprof -help  用于看服务器目前的服务状态
生成svg格式，是矢量图，放大不会失真。

go tool pprof -svg http://localhost:8081/debug/pprof/goroutine?debug=1  //最后一个（goroutine?debug=1 ）是其中一个goroutine

提示缺少安装Is Graphviz installed?：
Fetching profile over HTTP from http://localhost:8081/debug/pprof/goroutine?debug=1
Saved profile in C:\Users\折腾\pprof\pprof.goroutine.001.pb.gz
failed to execute dot. Is Graphviz installed? Error: exec: "dot": executable file not found in %PATH%


使用了docker
docker images | grep golang
| 是linux命令管道
grep命令（自己查询学习 linux命令管道，grep命令，苹果直接支持linux命令）
在管道文本流中，过滤出符合带有golang关键字的字符串行并返回。

docker run -it d6b3a41b2853 sh // 这里是什么意思？
输入服务器地址，不能用locaohost： 如： xxx/go /bin /go tool pprof -svg http://192.168.3.47:8081/debug/pprof/goroutine?debug=1
然后就生成了一个svg格式的文件。该文件是在docker内的？？？应该是
老师cat 了该svg文件
然后把cat打印的文件，复制到并命名了新的svg文件。然后就打开了

go tool pprof - nodecount 5000 -svg http://192.168.3.47:8081/debug/pprof/goroutine?debug=1   // 1 和 2 不同 数字越大dug显示得越齐
// 192.168.3.47 是服务器的地址


heap 内存
-
注意：
-nodecount 参数 很容易忽略的   设置大一些的数 10，8个不容易看出问题。 一个就是一个goroutine？  成千上万个把问题看得全。


grpc：gRPC 基于 HTTP/2 标准设计，带来诸如双向流、流控、头部压缩、单 TCP 连接上的多复用请求等特。

etcd： etcd 是一个高度一致的分布式键值存储，它提供了一种可靠的方式来存储需要由分布式系统或机器集群访问的数据。

virtral box

现在一般对外用 rest api， 对内用grpc