 20：13 grpc
1. Web编程与RPC

web编程的烦恼：
1.1 要败。
1.2 要时刻考虑发送的内容，返回的内容，并做内容校验，否则无法保证成功
1.3 需要使用特定的网络客户端来发送请求，也要启动特定的服务端接收请求
1.4 如果想要连续获取服务端的变更，就需要不停地轮询检查变更。

有没有一种办法，写功能的时候调用服务端的方法、接口像本地直接调用一样？
有没有一种办法，服务端可以主动把变更推送到客户端？同样客户端也可以连续一串操作让服务端确认？

web和rpc对比
          web			rpc
优点：易扩展，已使用，通用		有效载荷高，效率高，轻量级
缺点：效率低，有效载荷低，设计要求高	不易扩展，非标准化

20：28
2. gRPC
gRPC是一个现代化的高性能的RPG框架，它可以灵活的运行在各种环境中：
数据中心，移动终端，浏览器等等。
同时，它通过丰富的插件来扩展支持负载均衡、跟踪、健康检查、认证等等。
gRPC通过protobuf来定义模型、接口，并通过自动化工具生成go代码。

protoc --go_out=.--plugin=types.proto  //自动生成types.proto文件
protoc-go-inject-tag-input="*.pb.go" // 注入字节，如gorm的tag（标签）

20:38
gRPC 可以通过service来定义服务接口，从而实现像在客户端调用接口一样调用服务端接口，完成远程调用与交互。

注册一个服务
service GetPersonalInfo{ // service 是个服务，是相互通信的接口。
	rpc Register(PersonalInformation)returns(PersonalInformation){}
}

命令行：
protoc -I . --go_out=plugins=grpc:. *.proto //自动生成grpc的golang代码 

我输入该命令报错，如下：
--go_out: protoc-gen-go: plugins are not supported; use 'protoc --go-grpc_out=...' to generate gRPC
运行如下，解决了问题：
go get github.com/golang/protobuf/protoc-gen-go 
重新安装了这个包就成功了。

20：46
依赖的包
golang.org/x/net/context
google.golang.org/grpc
google.golang.org/grpc/connectivity

21：13
google一下 ：grpc javascript support
grpc 对 javascript 的支持

gRPC除了支持单次调用外，还可以支持双方互相通信：
1. 客户端单词发送请求，服务端单词答复
2. 客户端多次发送请求，服务端单词答复
3. 客户端单词发送请求，服务端多次答复
4. 客户端多次发送请求，服务端多次答复


21:14 stream
流


service GetPersonalInfo{
rpc Register(PersonalInformation) returns(PersonalInformation){}
rpc RegisterPersons(stream PersonalInformation) returns (PersonalInformations){}
// 多次请求，单次答复
}

命令行：
protoc -I . --go_out=plugins=grpc:. *.proto  (跟上面的命令一样的)
	这个 . 表示该级文件夹内。所以前后要有空格。不然会被认为是一体的。



21：18 
案例客户端单次去，多次回复（服务端）

聊天器：单播，主播，广播


21:46
3. 实战：使用gRPC完成体制排行榜

定义grpc中的message
message PersonalInformationFatRate{
 string name = 1; // grpc会自动大写Name
 float fatRat = 2;
}

即使是函数中只要name 在rpc的参数中也要填上完整的参数，如下：
如函数：GetFatRate(name string)(...)
service RankService{
rpc GetFatRate(PersonalInformation) returns (PersonalInformation){} 
//参数不是name，而是完整的PersonalInformation
//虽然参数中只要name，而不是完整的Personalinformation
}

message PersonalInformation{
int64 id = 1；
string name = 2;
...
}



4. gRPC注意事项

grpc网络编程，不是web编程

--help 在00cool中

flag.StringVar(&p, "path", ".", "the path to expose as http") //路径
// "path"是命令参数的名字，"."是默认值 ，
var port int
flag.IntVar(&port, "port", 8089, "the port to expose") // 命令行的使用方法
//./00_cool.exe --help  查看有哪些参数可用。
//./00_cool.exe --port 8080 把端口设置成8080 运行。

gateway 是什么？