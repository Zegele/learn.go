


19：14 编码方式 （代码沟通的桥梁）
1. JSON
JSON是一种轻量级数据交换格式。它将golang的对象转为纯文本的格式，既方便查阅，也方便传输。
Golang对象既可以转为JSON，也可以从JSON转回golang对象。

pkg-apis-types.go //(该文件中都是标准)

json.marchal // encoding 包下的

log包打印的log可以包含更多的信息 log.Fatal(err )


JSON 格式

1. JSON格式支持注解 ，但是不能有注释
2. Golang限制只有Public的字段可以编码到JSON格式中（其他编码格式也遵循同样规则)
golang限制 JSON只能带大写字段






20：04 实例化函数

20：19 讲安装protoc


2. YAML 

20:20 yaml
yaml是一种轻量级、简洁、强大的数据交换格式。它同JSON一样，将golang的对象转为纯文本的格式，既方便查阅，也方便传输；同时支持注释。 
Golang对象既可以转为yaml，也可用从yaml转回golang对象。

适合文档操作，注释等



3. PROTOBUF
(//Protobuf安装参考：https://www.bilibili.com/video/BV1jK411N7rb?p=8    
windows 详细操作过程：包含protoc、protobuf-gen-go、google.golang.org包)
极客只有两个.exe 没有包的讲解。
20：40 
protobuf 是一种性能优异、跨语言、跨平台的序列化格式。它是基于二进制的描述性格式，非纯文本，因此它的编码内容不可直接（被人）读取。
Protobuf有专门的语法，需要专门的代码生成器得到golang代码。


protobuf定义案例

定义完成后，生成protobuf
在所在的文件夹下运行命令：

yamlspecil //ghodss/yaml //第三方开源的工作，可以解决yaml格式化时，可以忽略生成的不必要的字段。

20:55 保存原生的protobuf
protobuf marshal 和 unmarshal

人没法看懂

04.think



21：37 数据库
1. 怎样快速、又安全地保存所有的数据
2. 怎么更快地从大规模数据中筛选出自己需要的数据？
3. 怎么更方便地通过工具完成与这些数据的交互？

21：40 什么是数据库
数据库是通过某些技术手段对数据进行高效组织、存储、管理的仓库。

1.管理大规模数据
2. 高效组织
3. 可靠保存
4. 管理方便

MySQL \ TiDB\ MariaDB\ PostgreSQL\ ORACLE
 

21：44 数据存储
1. 文件存储
	一般文件 路径
2. 数据存储
   数据库通常以B+树存储数据
   数据库存储的对象是数据或结构化数据
   数据库将加工后的数据存入磁盘
   只能通过数据库的功能来管理数据

3. 表Table （列Column）

安装MySQL Workbench

参考安装MySQL：https://www.bilibili.com/video/BV1W7411C7iy/?spm_id_from=autoNext
